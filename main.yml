name: CI

on:
  push:
    branches:
      - main

jobs:
  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Run unit tests
        run: go test -race $(go list ./... | grep -v /vendor/)

  verify-code-signature:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Verify code signature
        run: |
          docker run --rm \
            -e COSIGN_YES=true \
            -e SIGSTORE_ID_TOKEN=$SIGSTORE_ID_TOKEN \
            -v $(pwd):/workspace \
            ghcr.io/sigstore/gitsign:v0.10.1 \
            /bin/bash -c "gitsign initialize --mirror=$TUF_URL --root=$TUF_URL/root.json && gitsign verify --certificate-identity=veshanka@redhat.com --certificate-oidc-issuer=https://accounts.google.com HEAD"

  podman-build:
    runs-on: ubuntu-latest
    needs: [verify-code-signature]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up podman
        run: |
          sudo apt update
          sudo apt install -y podman
      - name: Build and push Docker image
        run: |
          podman build --tag ${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA .
          podman login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
          podman push ${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA

  generate-provenance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate provenance
        run: ./scripts/generate.sh > predicate.json
      - name: Upload provenance artifact
        uses: actions/upload-artifact@v2
        with:
          name: provenance
          path: predicate.json

  sign-and-attest:
    runs-on: ubuntu-latest
    needs: [generate-provenance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Sign and attest Docker image
        run: |
          cosign login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          cosign initialize
          cosign sign ${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA
          cosign attest --predicate predicate.json --type https://slsa.dev/provenance/v1 ${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA

  verify-signature:
    runs-on: ubuntu-latest
    needs: [sign-and-attest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Verify signature
        run: |
          cosign login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          cosign initialize
          cosign verify --certificate-identity-regexp gitlab.com/veshanka1 --certificate-oidc-issuer-regexp gitlab.com ${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA

  ec-validate:
    runs-on: ubuntu-latest
    needs: [verify-signature]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: EC validate
        run: |
          cosign initialize
          cat <<EOF | tee images.yaml
          ---
          components:
            - containerImage: "${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA"
              source:
                git:
                  url: "${{ secrets.REPOSITORY_URL }}"
                  revision: "${{ github.sha }}"
          EOF
          ec validate image --images images.yaml --policy policy.yaml --output yaml --show-successes

  tag-latest:
    runs-on: ubuntu-latest
    needs: [ec-validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Tag latest
        run: |
          cosign login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          cosign copy -f "${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:$GITHUB_SHA" ${{ secrets.DOCKER_REGISTRY }}/$GITHUB_REPOSITORY:latest
